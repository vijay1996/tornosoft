{"version":3,"sources":["mainStyle.js","components/Login.tsx","components/Signup.tsx","components/Header.tsx","components/PreLogin.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["formStyle","alignLeft","textAlign","fullWidth","width","container","header","backgroundColor","color","padding","fields","button","link","cursor","formStyleLocal","Login","props","Paper","style","Typography","variant","TextField","size","label","name","type","Grid","item","sm","Button","Link","onClick","setDisplay","Signup","useState","setName","email","setEmail","password","setPassword","confirm","setConfirm","handleChange","event","target","value","onChange","console","log","user","fetch","method","headers","body","JSON","stringify","then","catch","alert","handleSubmit","Header","flexLocal","centeredFlex","display","flexDirection","justifyContent","alignItems","PreLogin","className","height","App","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yRAAaA,EAAY,CACrBC,UAAW,CACPC,UAAW,QAEfC,UAAW,CACPC,MAAO,QAEXC,UAAW,CACPD,MAAO,OACPF,UAAW,UAEfI,OAAQ,CACJC,gBAAiB,UACjBC,MAAO,QACPC,QAAS,MAEbC,OAAQ,CACJN,MAAO,MACPK,QAAS,KAEbE,OAAQ,CACJJ,gBAAiB,UACjBC,MAAO,QACPC,QAAS,KACTL,MAAO,OAEXQ,KAAM,CACFH,QAAS,KACTL,MAAO,MACPI,MAAO,UACPK,OAAQ,Y,OC1BVC,EAAsCd,EAqC7Be,EA/BmB,SAACC,GAC/B,OACI,eAACC,EAAA,EAAD,CAAOC,MAAOJ,EAAeT,UAA7B,UACI,qBAAKa,MAAOJ,EAAeR,OAA3B,SACI,cAACa,EAAA,EAAD,CAAYC,QAAQ,KAApB,qBAEJ,uBACA,gCACI,cAACC,EAAA,EAAD,CAAWH,MAAOJ,EAAeJ,OAAQY,KAAK,QAAQC,MAAM,QAAQH,QAAQ,WAAWI,KAAK,QAAQC,KAAK,UACzG,uBAAM,uBACN,cAACJ,EAAA,EAAD,CAAWH,MAAOJ,EAAeJ,OAAQY,KAAK,QAAQC,MAAM,WAAWH,QAAQ,WAAWI,KAAK,WAAWC,KAAK,aAC/G,uBAAM,uBACN,8BACI,eAACC,EAAA,EAAD,CAAMrB,WAAS,EAAf,UACI,cAACqB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACI,cAACC,EAAA,EAAD,CAAQX,MAAOJ,EAAeH,OAA9B,sBAEJ,uBACA,uBACA,uBACA,cAACe,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACI,cAACE,EAAA,EAAD,CAAMC,QAAS,kBAAIf,EAAMgB,WAAW,WAAWd,MAAOJ,EAAeF,KAArE,+CAKhB,2BChCNE,EAAsCd,EAwF7BiC,EAlFoB,SAACjB,GAEhC,MAAwBkB,mBAAS,IAAjC,mBAAOV,EAAP,KAAaW,EAAb,KACA,EAA0BD,mBAAS,IAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAAgCH,mBAAS,IAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KACA,EAA8BL,mBAAS,IAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KAEMC,EAAe,SAACC,GAClB,OAAQA,EAAMC,OAAOpB,MACjB,IAAK,OACDW,EAAQQ,EAAMC,OAAOC,OACrB,MACJ,IAAK,QACDR,EAASM,EAAMC,OAAOC,OACtB,MACJ,IAAK,UACDJ,EAAWE,EAAMC,OAAOC,OACxB,MACJ,IAAK,WACDN,EAAYI,EAAMC,OAAOC,SA6BrC,OACI,eAAC5B,EAAA,EAAD,CAAOC,MAAOJ,EAAeT,UAA7B,UACI,qBAAKa,MAAOJ,EAAeR,OAA3B,SACI,cAACa,EAAA,EAAD,CAAYC,QAAQ,KAApB,uBAEJ,uBACA,gCACA,cAACC,EAAA,EAAD,CAAWH,MAAOJ,EAAeJ,OAAQY,KAAK,QAAQC,MAAM,OAAOH,QAAQ,WAAWI,KAAK,OAAOC,KAAK,OAAOqB,SAAU,SAACH,GAAD,OAAWD,EAAaC,MAC5I,uBAAM,uBACN,cAACtB,EAAA,EAAD,CAAWH,MAAOJ,EAAeJ,OAAQY,KAAK,QAAQC,MAAM,QAAQH,QAAQ,WAAWI,KAAK,QAAQC,KAAK,QAAQqB,SAAU,SAACH,GAAD,OAAWD,EAAaC,MACnJ,uBAAM,uBACN,cAACtB,EAAA,EAAD,CAAWH,MAAOJ,EAAeJ,OAAQY,KAAK,QAAQC,MAAM,WAAWH,QAAQ,WAAWI,KAAK,WAAWC,KAAK,WAAWqB,SAAU,SAACH,GAAD,OAAWD,EAAaC,MAC5J,uBAAM,uBACN,cAACtB,EAAA,EAAD,CAAWH,MAAOJ,EAAeJ,OAAQY,KAAK,QAAQC,MAAM,mBAAmBH,QAAQ,WAAWI,KAAK,UAAUC,KAAK,WAAWqB,SAAU,SAACH,GAAD,OAAWD,EAAaC,MACnK,uBAAM,uBACN,8BACI,eAACjB,EAAA,EAAD,CAAMrB,WAAS,EAAf,UACI,cAACqB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACI,cAACC,EAAA,EAAD,CAAQE,QAAU,YA1CrB,WACjBgB,QAAQC,IAAIV,GACZS,QAAQC,IAAIR,GACZ,IAAMS,EAAO,CACTzB,OACAY,QACAE,YAEAA,IAAaE,IACbO,QAAQC,IAAIC,GACZC,MAAM,+BAAgC,CAClCC,OAAQ,OACRC,QAAS,CACL,KAAQ,WAEZC,KAAMC,KAAKC,UAAUN,KACtBO,MAAK,WACJT,QAAQC,IAAI,uBACbS,OAAM,WACLC,MAAM,sBAuB8BC,IAAkBzC,MAAOJ,EAAeH,OAAhE,sBAEJ,uBACA,uBACA,uBACA,cAACe,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACI,cAACE,EAAA,EAAD,CAAMC,QAAS,kBAAIf,EAAMgB,WAAW,UAAUd,MAAOJ,EAAeF,KAApE,gDAKhB,2BC5ENM,G,MAAQ,CACVV,MAAO,YAGIoD,EAZA,WACX,OACI,wBAAQ1C,MAAOA,EAAf,SACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,0BCANyC,EJ4Bc,CAChBC,aAAc,CACVC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,WIhBLC,EAfE,WACb,MAA8BjC,mBAAS,SAAvC,mBAAO6B,EAAP,KAAgB/B,EAAhB,KACA,OACI,sBAAKoC,UAAU,MAAMlD,MAAK,2BAAM2C,EAAUC,cAAhB,IAA8BO,OAAQ,SAAhE,UACI,8BACI,cAAC,EAAD,MAEJ,uBACA,8BACkB,UAAZN,EAAsB,cAAC,EAAD,CAAO/B,WAAYA,IAAiB,cAAC,EAAD,CAAQA,WAAYA,UCRjFsC,MANf,WACE,OACE,cAAC,EAAD,K,QCHSC,EAAQC,YAAe,CAClCC,QAAS,K,QCSSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAC+B,GACLA,EAAaC,gBAEd/B,OAAM,SAACgC,GACN1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.5dc29058.chunk.js","sourcesContent":["export const formStyle = {\n    alignLeft: {\n        textAlign: \"left\"\n    },\n    fullWidth: {\n        width: \"100%\"\n    },\n    container: {\n        width: \"50vw\",\n        textAlign: \"center\"\n    },\n    header: {\n        backgroundColor: \"#FF865E\",\n        color: \"white\",\n        padding: \"1%\"\n    },\n    fields: {\n        width: \"90%\",\n        padding: \"0\"\n    },\n    button: {\n        backgroundColor: \"#FF865E\",\n        color: \"white\",\n        padding: \"1%\",\n        width: \"70%\"\n    },\n    link: {\n        padding: \"1%\",\n        width: \"70%\",\n        color: \"#FF865E\",\n        cursor: \"pointer\"\n    }\n}\n\nexport const flex = {\n    centeredFlex: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }\n}","import React from 'react'\nimport { Typography, Paper, TextField, Button, Grid, Link } from \"@material-ui/core\"\nimport { formStyle } from \"../mainStyle\";\n\nconst formStyleLocal:{[k:string]: object} = formStyle \n\ninterface propType {\n    setDisplay(arg: string): void;\n}\n\nconst Login: React.FC<propType> = (props) => {\n    return (\n        <Paper style={formStyleLocal.container}>\n            <div style={formStyleLocal.header}>\n                <Typography variant=\"h2\">Login</Typography>\n            </div>\n            <br />\n            <div>\n                <TextField style={formStyleLocal.fields} size=\"small\" label=\"Email\" variant=\"outlined\" name=\"email\" type=\"email\" />\n                <br /><br />\n                <TextField style={formStyleLocal.fields} size=\"small\" label=\"Password\" variant=\"outlined\" name=\"password\" type=\"password\" />\n                <br /><br />\n                <div>\n                    <Grid container>\n                        <Grid item sm={12}>\n                            <Button style={formStyleLocal.button}>Submit</Button>\n                        </Grid>\n                        <br />\n                        <br />\n                        <br />\n                        <Grid item sm={12}>\n                            <Link onClick={()=>props.setDisplay('signup')} style={formStyleLocal.link}>Do not have an account?</Link>\n                        </Grid>\n                    </Grid>\n                </div>\n            </div>\n            <br />\n        </Paper>\n    )\n}\n\nexport default Login;","import React, { useState } from 'react'\nimport { Typography, Paper, TextField, Button, Grid, Link } from \"@material-ui/core\"\nimport { formStyle } from \"../mainStyle\";\n\nconst formStyleLocal:{[k:string]: object} = formStyle \n\ninterface propType {\n    setDisplay(arg: string): void;\n}\n\nconst Signup: React.FC<propType> = (props) => {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirm, setConfirm] = useState('')\n\n    const handleChange = (event: any) => {\n        switch (event.target.name) {\n            case 'name':\n                setName(event.target.value)\n                break;\n            case 'email':\n                setEmail(event.target.value)\n                break;\n            case 'confirm':\n                setConfirm(event.target.value)\n                break;\n            case 'password':\n                setPassword(event.target.value)\n                break;\n        }\n    }\n\n    const handleSubmit = () => {\n        console.log(password)\n        console.log(confirm)\n        const user = {\n            name,\n            email,\n            password\n        }\n        if (password === confirm) {\n            console.log(user)\n            fetch(\"http://localhost:8000/signup\", {\n                method: \"POST\",\n                headers: {\n                    \"mode\": \"no-cors\"\n                },\n                body: JSON.stringify(user)\n            }).then(() => {\n                console.log(\"request complete\")\n            }).catch(()=>{\n                alert(\"request failed\")\n            })\n        }\n    }\n\n    return (\n        <Paper style={formStyleLocal.container}>\n            <div style={formStyleLocal.header}>\n                <Typography variant=\"h2\">Sign Up</Typography>\n            </div>\n            <br />\n            <div>\n            <TextField style={formStyleLocal.fields} size=\"small\" label=\"Name\" variant=\"outlined\" name=\"name\" type=\"text\" onChange={(event) => handleChange(event)} />\n                <br /><br />\n                <TextField style={formStyleLocal.fields} size=\"small\" label=\"Email\" variant=\"outlined\" name=\"email\" type=\"email\" onChange={(event) => handleChange(event)} />\n                <br /><br />\n                <TextField style={formStyleLocal.fields} size=\"small\" label=\"Password\" variant=\"outlined\" name=\"password\" type=\"password\" onChange={(event) => handleChange(event)} />\n                <br /><br />\n                <TextField style={formStyleLocal.fields} size=\"small\" label=\"Confirm password\" variant=\"outlined\" name=\"confirm\" type=\"password\" onChange={(event) => handleChange(event)} />\n                <br /><br />\n                <div>\n                    <Grid container>\n                        <Grid item sm={12}>\n                            <Button onClick={ ()=> {handleSubmit()} } style={formStyleLocal.button}>Submit</Button>\n                        </Grid>\n                        <br />\n                        <br />\n                        <br />\n                        <Grid item sm={12}>\n                            <Link onClick={()=>props.setDisplay('login')} style={formStyleLocal.link}>Already have an account?</Link>\n                        </Grid>\n                    </Grid>\n                </div>\n            </div>\n            <br />\n        </Paper>\n    )\n}\n\nexport default Signup;","import { Typography } from '@material-ui/core'\nimport '../master-style.css'\n\nconst Header = () => {\n    return (\n        <header style={style}>\n            <Typography variant=\"h1\">Tornosoft</Typography>\n        </header>\n    )\n}\n\nconst style = {\n    color: \"#FF865E\"\n}\n\nexport default Header;","import { useState } from \"react\"\nimport Login from \"./Login\"\nimport Signup from \"./Signup\"\nimport Header from \"./Header\"\nimport { flex } from \"../mainStyle\"\n\nconst flexLocal:{[k:string]: object} = flex \n\nconst PreLogin = () => {\n    const [display, setDisplay] = useState('login')\n    return (\n        <div className=\"App\" style={{...flexLocal.centeredFlex, height: \"80vh\"}} >\n            <div>\n                <Header />\n            </div>\n            <br />\n            <div>\n                { display === 'login' ? <Login setDisplay={setDisplay} /> : <Signup setDisplay={setDisplay} /> }\n            </div>\n        </div>\n    )\n}\n\nexport default PreLogin","import './App.css';\nimport PreLogin from \"./components/PreLogin\"\n\nfunction App() {\n  return (\n    <PreLogin />\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\n\nexport const store = configureStore({\n  reducer: {},\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}